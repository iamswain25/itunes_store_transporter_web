#!/usr/bin/env ruby

require "yaml"
require "optparse"
require "active_record"

VERSION = "0.0.1"

# Keeps ActiveRecord column serialization happy
YAML::ENGINE.yamler = "psych"

config   = nil
database = nil
options  = { :quiet => true }

# need to req a config file, but not for stop
opts = OptionParser.new do |opts|
  opts.banner = "usage: #$0 [options] start|stop|restart|run"

  opts.on('-h', '--help', 'Show this message') do
    puts opts
    exit 1
  end

  opts.on("-c", "--config=file", "Use the given configuration file") do |path|
    config = path
  end

  opts.on("-d", "--daemon", "Run as a daemon") do
    options[:daemon] = true
  end

  opts.on("--database=conn", "Database connection string") do |conn|
    database = conn
  end

  opts.on('--exit-on-complete', "Exit when no more jobs are available to run. This will exit if all jobs are scheduled to run in the future.") do
    options[:exit_on_complete] = true
  end

  opts.on('-i', '--identifier=N', 'A numeric identifier for the worker.') do |n|
    options[:identifier] = n
  end

  opts.on('-l', '--log=FILE', 'Log output to FILE') do |log|
    options[:log] = File.expand_path(log) # Log is created *after* daemonizing so it needs to be an abs path
  end

  opts.on('-m', '--monitor', 'Monitor and restart crashed instances (automatically sets the --daemon option)') do
    options[:monitor] = true
  end

  opts.on('--min-priority=N', 'Minimum priority of jobs to run.') do |n|
    options[:min_priority] = n
  end

  opts.on('--max-priority=N', 'Maximum priority of jobs to run.') do |n|
    options[:max_priority] = n
  end

  opts.on('--pid=DIR', 'Specifies a directory in which to store the process ids.') do |dir|
    options[:pid] = dir
  end

  opts.on('-p', '--prefix=NAME', "String to be prefixed to worker process names") do |prefix|
    options[:prefix] = prefix
  end

  opts.on('--queues=queues', "Specify which queue DJ must look up for jobs") do |queues|
    options[:queues] = queues
  end

  opts.on('--queue=queue', "Specify which queue DJ must look up for jobs") do |queue|
    options[:queues] = queue
  end

  opts.on('--sleep-delay=N', "Amount of time to sleep when no jobs are found") do |n|
    options[:sleep_delay] = n
  end

  opts.on("-v", "--version", "Worker version") do
    printf "%s v%s\n", File.basename($0), VERSION
    exit
  end

  opts.on('-w', '--worker-count=COUNT', "Number of unique workers to spawn") do |worker_count|
    options[:worker_count] = worker_count
  end
end

options[:argv] = opts.parse!(ARGV)

if config
  begin
    cfg = YAML.load_file(config)
    database = cfg.delete("database") if cfg["database"]
  rescue => e
    abort "failed to load config file #{config}: #{e}"
  end
end

abort "database required, use the --database or -c option" unless database

begin 
  # Uses AR classes which must have an active DB connection
  ActiveRecord::Base.establish_connection(database)
rescue => e
  abort "cannot connect to the database: #{e}"
end

require "worker"

# Copy config to options hash, giving command line options priority
cfg.each do |k, v|
  opt = k.to_s.tr("-", "_").to_sym
  next if options.include?(opt)
  options[opt] = v
end

worker = Worker.new(options)
worker.execute
